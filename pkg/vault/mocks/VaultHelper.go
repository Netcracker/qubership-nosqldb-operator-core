// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	v1 "k8s.io/api/core/v1"
)

// FakeVaultHelper is an autogenerated mock type for the VaultHelper type
type FakeVaultHelper struct {
	mock.Mock
}

// CheckSecretExists provides a mock function with given fields: secretName
func (_m *FakeVaultHelper) CheckSecretExists(secretName string) (bool, map[string]interface{}, error) {
	ret := _m.Called(secretName)

	if len(ret) == 0 {
		panic("no return value specified for CheckSecretExists")
	}

	var r0 bool
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (bool, map[string]interface{}, error)); ok {
		return rf(secretName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(secretName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) map[string]interface{}); ok {
		r1 = rf(secretName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(secretName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDatabaseConfig provides a mock function with given fields: configName, configSettings
func (_m *FakeVaultHelper) CreateDatabaseConfig(configName string, configSettings map[string]interface{}) error {
	ret := _m.Called(configName, configSettings)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(configName, configSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStaticRole provides a mock function with given fields: rolePath, roleSettings
func (_m *FakeVaultHelper) CreateStaticRole(rolePath string, roleSettings map[string]interface{}) error {
	ret := _m.Called(rolePath, roleSettings)

	if len(ret) == 0 {
		panic("no return value specified for CreateStaticRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(rolePath, roleSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GeneratePassword provides a mock function with given fields: policy
func (_m *FakeVaultHelper) GeneratePassword(policy string) (string, error) {
	ret := _m.Called(policy)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(policy)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(policy)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvTemplateForVault provides a mock function with given fields: envName, secretName
func (_m *FakeVaultHelper) GetEnvTemplateForVault(envName string, secretName string) v1.EnvVar {
	ret := _m.Called(envName, secretName)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvTemplateForVault")
	}

	var r0 v1.EnvVar
	if rf, ok := ret.Get(0).(func(string, string) v1.EnvVar); ok {
		r0 = rf(envName, secretName)
	} else {
		r0 = ret.Get(0).(v1.EnvVar)
	}

	return r0
}

// GetStaticRoleCredentials provides a mock function with given fields: roleName
func (_m *FakeVaultHelper) GetStaticRoleCredentials(roleName string) (map[string]interface{}, error) {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticRoleCredentials")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsDatabaseConfigExist provides a mock function with given fields: configName
func (_m *FakeVaultHelper) IsDatabaseConfigExist(configName string) (bool, error) {
	ret := _m.Called(configName)

	if len(ret) == 0 {
		panic("no return value specified for IsDatabaseConfigExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(configName)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(configName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(configName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsStaticRoleExists provides a mock function with given fields: rolePath
func (_m *FakeVaultHelper) IsStaticRoleExists(rolePath string) (bool, error) {
	ret := _m.Called(rolePath)

	if len(ret) == 0 {
		panic("no return value specified for IsStaticRoleExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(rolePath)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(rolePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rolePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVaultURL provides a mock function with given fields: path
func (_m *FakeVaultHelper) IsVaultURL(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for IsVaultURL")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResolvePassword provides a mock function with given fields: passAddress
func (_m *FakeVaultHelper) ResolvePassword(passAddress string) (string, error) {
	ret := _m.Called(passAddress)

	if len(ret) == 0 {
		panic("no return value specified for ResolvePassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(passAddress)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(passAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(passAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RotateRole provides a mock function with given fields: roleName
func (_m *FakeVaultHelper) RotateRole(roleName string) error {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for RotateRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StorePassword provides a mock function with given fields: secretName, password
func (_m *FakeVaultHelper) StorePassword(secretName string, password string) error {
	ret := _m.Called(secretName, password)

	if len(ret) == 0 {
		panic("no return value specified for StorePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(secretName, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFakeVaultHelper creates a new instance of FakeVaultHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFakeVaultHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *FakeVaultHelper {
	mock := &FakeVaultHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
