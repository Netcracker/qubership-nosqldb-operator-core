package types

import (
	consulApi "github.com/hashicorp/consul/api"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Recycler struct {
	Install   bool                     `json:"install,omitempty"`
	Resources *v1.ResourceRequirements `json:"resources,omitempty"`
}

type StorageRequirements struct {
	EmptyDir            bool                `json:"emptyDir,omitempty"`
	Size                []string            `json:"size,omitempty"`
	Volumes             []string            `json:"volumes,omitempty"`
	NodeLabels          []map[string]string `json:"nodeLabels,omitempty"`
	StorageClasses      []string            `json:"storageClasses,omitempty"`
	MatchLabelSelectors []map[string]string `json:"matchLabelSelectors,omitempty"`
	WaitPVCBound        bool                `json:"waitPvcBound,omitempty"`
	MountSettings       *v1.VolumeMount     `json:"mountSettings,omitempty"`
}

type DisasterRecoveryStatus struct {
	Mode    string `json:"mode"`
	Status  string `json:"status"`
	Comment string `json:"comment,omitempty"`
}

type ServiceStatusCondition struct {
	Type               string      `json:"type"`
	Status             bool        `json:"status"`
	Reason             string      `json:"reason"`
	Message            string      `json:"message"`
	LastTransitionTime metav1.Time `json:"lastTransitionTime"`
}

type VaultRegistration struct {
	DockerImage            string                   `json:"dockerImage,omitempty"`
	Enabled                bool                     `json:"enabled,omitempty"`
	Path                   string                   `json:"path,omitempty"`
	Url                    string                   `json:"url,omitempty"`
	Role                   string                   `json:"role,omitempty"`
	Method                 string                   `json:"method,omitempty"`
	RotationPeriod         int                      `json:"rotationPeriod,omitempty"`
	CloudURL               string                   `json:"cloudURL,omitempty"`
	CloudName              string                   `json:"cloudName,omitempty"`
	Token                  string                   `json:"token,omitempty"`
	NamespacedPath         string                   `json:"namespacedPath,omitempty"`
	InitContainerResources *v1.ResourceRequirements `json:"initContainerResources,omitempty"`
}

type ConsulRegistration struct {
	Enabled    bool   `json:"Enabled,omitempty"`
	Host       string `json:"Host,omitempty"`
	Port       string `json:"Port,omitempty"`
	AclEnabled bool   `json:"AclEnabled,omitempty"`
	AuthMethod string `json:"AuthMethod,omitempty"`
}

type AgentServiceRegistration struct {
	consulApi.AgentServiceRegistration `json:"-"`
	Enabled                            bool `json:"Enabled,omitempty"`
	DirectChecks                       bool `json:"DirectChecks,omitempty"`
}

type VaultDBEngine struct {
	Enabled      bool   `json:"enabled"`
	Name         string `json:"name,omitempty"`
	Role         string `json:"role,omitempty"`
	PluginName   string `json:"pluginName,omitempty"`
	AllowedRoles string `json:"allowedRoles,omitempty"`
}

type TLS struct {
	//Enables TLS
	Enabled bool `json:"enabled,omitempty"`
	//a name of Kubernetes secret that holds a CA certificate, a Signed Redis sertificate and a private key.
	CertificateSecretName string `json:"certificateSecretName,omitempty"`
	//a key in the Kubernetes secret `tls.rootCASecretName` that holds the CA certificate.
	RootCAFileName string `json:"rootCAFileName,omitempty"`
	//a key in the Kubernetes secret `tls.rootCASecretName` that holds the Signed Redis sertificate.
	SignedCRTFileName string `json:"signedCRTFileName,omitempty"`
	//a key in the Kubernetes secret `tls.rootCASecretName` that holds the private key.
	PrivateKeyFileName string `json:"privateKeyFileName,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VaultDBEngine) DeepCopyInto(out *VaultDBEngine) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new VaultDBEngine.
func (in *VaultDBEngine) DeepCopy() *VaultDBEngine {
	if in == nil {
		return nil
	}
	out := new(VaultDBEngine)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Recycler) DeepCopyInto(out *Recycler) {
	*out = *in
	in.Resources.DeepCopyInto(out.Resources)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceStatusCondition.
func (in *Recycler) DeepCopy() *Recycler {
	if in == nil {
		return nil
	}
	out := new(Recycler)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *VaultRegistration) DeepCopyInto(out *VaultRegistration) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceStatusCondition.
func (in *VaultRegistration) DeepCopy() *VaultRegistration {
	if in == nil {
		return nil
	}
	out := new(VaultRegistration)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ServiceStatusCondition) DeepCopyInto(out *ServiceStatusCondition) {
	*out = *in
	in.LastTransitionTime.DeepCopyInto(&out.LastTransitionTime)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceStatusCondition.
func (in *ServiceStatusCondition) DeepCopy() *ServiceStatusCondition {
	if in == nil {
		return nil
	}
	out := new(ServiceStatusCondition)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StorageRequirements) DeepCopyInto(out *StorageRequirements) {
	*out = *in
	if in.Size != nil {
		in, out := &in.Size, &out.Size
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.NodeLabels != nil {
		in, out := &in.NodeLabels, &out.NodeLabels
		*out = make([]map[string]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	if in.StorageClasses != nil {
		in, out := &in.StorageClasses, &out.StorageClasses
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.MatchLabelSelectors != nil {
		in, out := &in.MatchLabelSelectors, &out.MatchLabelSelectors
		*out = make([]map[string]string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = make(map[string]string, len(*in))
				for key, val := range *in {
					(*out)[key] = val
				}
			}
		}
	}
	if in.MountSettings != nil {
		in, out := &in.MountSettings, &out.MountSettings
		*out = new(v1.VolumeMount)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StorageRequirements.
func (in *StorageRequirements) DeepCopy() *StorageRequirements {
	if in == nil {
		return nil
	}
	out := new(StorageRequirements)
	in.DeepCopyInto(out)
	return out
}

func (in *AgentServiceRegistration) DeepCopyInto(out *AgentServiceRegistration) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ServiceStatusCondition.
func (in *AgentServiceRegistration) DeepCopy() *AgentServiceRegistration {
	if in == nil {
		return nil
	}
	out := new(AgentServiceRegistration)
	in.DeepCopyInto(out)
	return out
}

func (in *ConsulRegistration) DeepCopyInto(out *ConsulRegistration) {
	*out = *in
	return
}

// DeepCopy is an ConsulRegistration deepcopy function, copying the receiver, creating a new ServiceStatusCondition.
func (in *ConsulRegistration) DeepCopy() *ConsulRegistration {
	if in == nil {
		return nil
	}
	out := new(ConsulRegistration)
	in.DeepCopyInto(out)
	return out
}
